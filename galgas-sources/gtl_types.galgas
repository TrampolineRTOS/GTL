#-----------------------------------------------------------------------------*
#
#  @file gtl_types.galgas
#
#  @section desc File description
#
#  types for GTL.
#
#  @section copyright Copyright
#
#  GTL template language, part of Trampoline RTOS
#
#  Trampoline is copyright (c) CNRS, University of Nantes,
#  Ecole Centrale de Nantes
#  Trampoline is protected by the French intellectual property law.
#
#  This software is distributed under the GNU Public Licence V2.
#  Check the LICENSE file in the root directory of Trampoline
#
#  $Date$
#  $Rev$
#  $Author$
#  $URL$
#
#-----------------------------------------------------------------------------*

#=============================================================================*
# @gtlContext is used to store the execution context of a template
#-----------------------------------------------------------------------------*
class @gtlContext {
  @lstring         prefix
  @string          path
  @string          templateDirectory
  @string          userTemplateDirectory
  @string          templateExtension
  @stringlist      importPath
  @gtlDataList     inputVars
  @bool            propagateError
  @debuggerContext debuggerContext
}

func emptyContext
  ->@gtlContext context
{
  context = .new {
    !emptylstring()
    !""
    !""
    !""
    !"gtl"
    !.emptyList
    !.emptyList
    !true
    !defaultDebugSettings()
  }
}

setter @gtlContext addModulePath
  ?let @string rootPath
  ?let @string modulePath
{
  let @string normalizedModulePath =
    [[modulePath absolutePathFromPath !rootPath] stringByStandardizingPath]
  importPath += !normalizedModulePath
}

setter @gtlContext addInputVariable
  ?@gtlData inputVariable
{
  inputVars += !inputVariable
}

setter @gtlContext popFirstInputArg
  ?@location where
  !@gtlData  result
{
  if [inputVars length] > 0 then
    [!?inputVars popFirst ?result]
  else
    error where : "No input argument available" : result
  end
}

getter @gtlContext fullPrefix
  ?let @gtlData unused vars
  ->@lstring full
{
  full = prefix
}  

func pathWithExtension
  ?@gtlContext context
  ?@string     path
  ->@string extendedPath
{
  if [path pathExtension] != [context templateExtension] then
    extendedPath = path + "." + [context templateExtension]
  else
    extendedPath = path
  end
}

getter @gtlContext fullTemplateFileName
  ?@gtlContext context
  ?@gtlData    vars
  ?@lstring    simpleName
  ->@lstring fullName
{
  #@gtlContext copy = self
  let @lstring fullPref = [self fullPrefix !vars]
  
  @bool found = false
  @string prefixedTemplatePath
  @string hierarchicalPath
  @string rootPath

  #
  # First search in the user template directory
  #
  prefixedTemplatePath = 
    [userTemplateDirectory stringByAppendingPath !fullPref]
  hierarchicalPath = path
  rootPath = pathWithExtension(
    !context
    ![prefixedTemplatePath stringByAppendingPath ![simpleName string]]
  )

  loop ( [hierarchicalPath length] )
    let @string fullPath = pathWithExtension(
      !context
      ![[prefixedTemplatePath stringByAppendingPath !hierarchicalPath] stringByAppendingPath
        !simpleName
       ]
    )
#    message "Search in " + fullPath + "... "    
    if [fullPath fileExists] then
#      message "found\n"
      rootPath = fullPath
      found = true
#    else
#      message "\n"
    end
  while not found && [hierarchicalPath length] > 0 do
    hierarchicalPath = [hierarchicalPath stringByDeletingLastPathComponent]
  end
  
  if not found then
    #
    # Second search in the template directory
    #
    prefixedTemplatePath = 
      [templateDirectory stringByAppendingPath !fullPref]  
    hierarchicalPath = path
    rootPath = pathWithExtension(
      !context
      ![prefixedTemplatePath stringByAppendingPath ![simpleName string]]
    )
  

    loop ( [hierarchicalPath length] )
      let @string fullPath = pathWithExtension(
        !context
        ![[prefixedTemplatePath stringByAppendingPath !hierarchicalPath] stringByAppendingPath
          !simpleName
         ]
      )
  #    message "Search in " + fullPath + "... "    
      if [fullPath fileExists] then
  #      message "found\n"
        rootPath = fullPath
        found = true
  #    else
  #      message "\n"
      end
    while not found && [hierarchicalPath length] > 0 do
      hierarchicalPath = [hierarchicalPath stringByDeletingLastPathComponent]
    end
  end
#  message "#### Return " + rootPath + "\n"
  fullName = .new {
    !rootPath
    !simpleName
  }
}

getter @string stringByAppendingPath
  ?let @string pathToAppend
  ->@string result
{
  if self == "" then
    result = pathToAppend
  else
    if [self lastCharacter] == '/' then
      result = self + pathToAppend
    else
      result = self + '/' + pathToAppend
    end
  end
}

#=============================================================================*
# @gtlDataList is used to pass arguments to methods and functions
#-----------------------------------------------------------------------------*
list @gtlDataList
{
  @gtlData data
}

#=============================================================================*
# A variable map is a map of variables. Used for variables of a gtl program
# and used in struct and map of the language itself.
#-----------------------------------------------------------------------------*
map @gtlVarMap {
  @gtlData value
  insert put error message "a variable or field named '%K' is already declared in %L"
  search get error message "there is no variable or field named '%K'"
  search getResult error message "function did not return a value in '%K'"
  remove del error message "there is no variable or field named '%K' to delete"
}

setter @gtlVarMap replaceOrCreate
  ?let @lstring key
  ?let @gtlData data
{
  if [self hasKey ![key string]] then
    [!?self setValueForKey !data !key]
  else
    [!?self put !key !data]
  end
}

setter @gtlVarMap replaceOrCreateAtLevel
  ?let @lstring key
  ?let @gtlData data
  ?let @uint    level
{
  if [self hasKeyAtLevel ![key string] !level] then
    [!?self del !key ?*]
  end
  [!?self put !key !data]
}

#=============================================================================*
# An expression map is a map of expressions. Used for literal init of structs
# and maps
#-----------------------------------------------------------------------------*
map @gtlExpressionMap {
  @gtlExpression expression
  insert put error message "a field named '%K' is already declared in %L"
  search get error message "there is no field named '%K'"
  remove del error message "there is no field named '%K' to delete"
}

#=============================================================================*
# templates are cached in a @gtlTemplateMap in order to retrieve them without
# parsing more than once
#-----------------------------------------------------------------------------*
class @gtlTemplate {
  @string             path
  @gtlInstructionList program
}

method @gtlTemplate execute
  ?!@gtlContext context
  ?!@gtlData    vars
  ?!@library    lib
  ?!@string     outputString
{
  [program execute !?context !?vars !?lib !?outputString]
}

map @gtlTemplateMap {
  @gtlTemplate aTemplate
  insert put error message "a template at path '%K' is already declared in %L"
  search get error message "there is no template at path '%K'"
}

setter @gtlTemplateMap getTemplate
  ? let @gtlContext  context
  ? @lstring         path
  ? @bool            ifExists
  ?!@library         lib
  ! @bool            found
  ! @gtlTemplate     result
{
  if [self hasKey !path] then
    found = true
    [self get !path ?result]
  else
    if [path fileExists] then
      found = true
      grammar gtl_grammar in path
        !                    context
        !?                   lib
        ?let @gtlInstructionList program
      result = .new { !path !program }
      [!?self put !path !result]
    else
      found = false
      if ifExists then
        result = .new { !path !.emptyList }
      else
        error path : "template file not found at \"" + path + "\"" : result
      end
    end
  end
}

#=============================================================================*
# An library stores a map of functions and getter
#-----------------------------------------------------------------------------*
class @library {
  @gtlFuncMap     funcMap
  @gtlGetterMap   getterMap
  @gtlSetterMap   setterMap
  @gtlTemplateMap templateMap
  @stringset      doneImports
}

func emptyLib
  ->@library result
{
  result = .new { !.emptyMap !.emptyMap !.emptyMap !.emptyMap !.emptySet }
}

getter @library functionExists
  ?let @lstring name
  ->@bool exists
{
  exists = [funcMap hasKey ![name string]]
}

getter @library getFunction
  ?let @lstring  name
  ->@gtlFunction aFunction
{
  [funcMap get !name ?aFunction]
}

setter @library putFunction
  ?let @lstring     name
  ?let @gtlFunction aFunction
{
  [!?funcMap put !name !aFunction]
}

getter @library getterExists
  ?let @string  type
  ?let @lstring name
  ->@bool exists
{
  exists = [getterMap hasKey !type + name]
}

getter @library getGetter
  ?let @string   type
  ?let @lstring  name
  ->@gtlGetter   aGetter
{
  [getterMap get !.new { !type + name ![name location] } ?aGetter]
}

setter @library putGetter
  ?let @lstring   name
  ?let @gtlGetter aGetter
{
  [!?getterMap put !name !aGetter]
}

getter @library setterExists
  ?let @string  type
  ?let @lstring name
  ->@bool exists
{
  exists = [setterMap hasKey !type + name]
}

getter @library getSetter
  ?let @string   type
  ?let @lstring  name
  ->@gtlSetter   aSetter
{
  [setterMap get !.new { !type + name ![name location] } ?aSetter]
}

setter @library putSetter
  ?let @lstring   name
  ?let @gtlSetter aSetter
{
  [!?setterMap put !name !aSetter]
}

getter @library hasImport
  ?let @string importPath
  ->@bool result
{
  result = [doneImports hasKey !importPath]
} 

setter @library doImport
  ?let @string importPath
{
  doneImports += !importPath
} 

setter @library getTemplate
  ? let @gtlContext context
  ? @lstring        path
  ? @bool           ifExists
  ?!@library        lib
  ! @bool           found
  ! @gtlTemplate    result
{
#  message "**** Getting " + path + "\n"
  [!?templateMap getTemplate
    !context
    !path
    !ifExists
    !?lib
    ?found
    ?result
  ]
}
